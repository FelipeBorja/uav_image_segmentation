# -*- coding: utf-8 -*-
"""
Created on Wed May 19 17:48:21 2021

@author: Colin Fox
"""

import cv2
import numpy
import matplotlib.pyplot as plt
import matplotlib.cm as cm

def resizeToFrame(img):
    return cv2.resize(img, (1920, 1080)) 
#
#this crops the image down to size, gets rid of all nonessential information withou
#ridding the image of essential information
#from this link
#https://stackoverflow.com/questions/58167717/trim-image-during-stitching
#


# read image
original = cv2.imread("/Users/notfo/Desktop/ALL CODING/USL/ImageCropping/odm_orthophoto.tif")

# convert to grayscale
gray = cv2.cvtColor(original,cv2.COLOR_BGR2GRAY)

# threshold
_,thresh = cv2.threshold(gray,5,255,cv2.THRESH_BINARY)

# apply close and open morphology to fill tiny black and white holes
kernel = numpy.ones((5,5), numpy.uint8)
thresh = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
thresh = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)

# get contours (presumably just one around the nonzero pixels) 
# then crop it to bounding rectangle
contours = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
contours = contours[0] if len(contours) == 2 else contours[1]
for cntr in contours:
    x,y,w,h = cv2.boundingRect(cntr)
    img = original[y:y+h,x:x+w]


#my section
print(img.shape)
w, h = img.shape[0:2]

#how many subregions the image is divided into
subregionCount = 100


#width and height in pixels of each grid square, assuming subregionCount by subregionCount squares
gridPixelW = int(w/subregionCount)
gridPixelH = int(h/subregionCount)

#subregionCountxsubregionCount grid initially filled with all false values
gridOfInterest = numpy.ones((subregionCount, subregionCount))

def isSignificant(img, currWidth, currHeight):
    significant = False
    #find current topleft pixel of grid img
    currWidthPixel = currWidth*gridPixelW
    currHeightPixel = currHeight*gridPixelH
    
    #create cropped image from grid
    currentGridImg = img[currWidthPixel:currWidthPixel+gridPixelW, currHeightPixel:currHeightPixel+gridPixelH]

    #get 3 wide arr of r,g,b vals respectively
    channels = cv2.mean(currentGridImg)
    #if the r,g,b sum is less than 700
    if channels[0]+channels[1]+channels[2]>60:
        significant = True
    #returns true or false if the evaluated subregion is "significant" or not
    return significant
      
           
for widthVal in range(subregionCount):
    for heightVal in range(subregionCount):
        if isSignificant(img, widthVal, heightVal) == True:
            gridOfInterest[widthVal][heightVal] = 0

#
#
#found this on stackoverflow, need to find exact link
#
#


def findMaxRect(matrix):
    nrows = subregionCount
    ncols = subregionCount
    skip = 1
    area_max = (0, [])
    w = numpy.zeros(dtype=int, shape=matrix.shape)
    h = numpy.zeros(dtype=int, shape=matrix.shape)
    for r in range(nrows):
        for c in range(ncols):
            if matrix[r][c] == skip:
                continue
            if r == 0:
                h[r][c] = 1
            else:
                h[r][c] = h[r-1][c]+1
            if c == 0:
                w[r][c] = 1
            else:
                w[r][c] = w[r][c-1]+1
            minw = w[r][c]
            for dh in range(h[r][c]):
                minw = min(minw, w[r-dh][c])
                area = (dh+1)*minw
                if area > area_max[0]:
                    area_max = (area, [(r-dh, c-minw+1, r, c)])
    
    print('area', area_max[0])
    for t in area_max[1]:
        print('Cell 1:({}, {}) and Cell 2:({}, {})'.format(*t))
    print(area_max[1])
    return area_max[1]
coords = findMaxRect(gridOfInterest)[0]


fig = plt.figure()
ax2 = fig.add_subplot(122)
gridOfInterest[coords[0]][coords[1]]=-1
gridOfInterest[coords[2]][coords[3]]=-1
# 'nearest' interpolation - faithful but blocky
ax2.imshow(gridOfInterest, interpolation='nearest', cmap=cm.Greys_r)

plt.show()
plt.rcParams['interactive'] == True



pixelX1 = coords[0] *gridPixelW
pixelX2 = coords[2] *gridPixelW
pixelY1 = coords[1] *gridPixelH
pixelY2 = coords[3] *gridPixelH




cv2.imshow('cropped', resizeToFrame(img[pixelX1:pixelX2,pixelY1:pixelY2]))
cv2.waitKey(0)
